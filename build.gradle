plugins {
  id 'java-library'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.owasp.dependencycheck' version '6.2.2'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'org.sonarqube' version '3.3'
  id 'io.freefair.lombok' version '5.3.3.3'
  id 'maven-publish'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

group = 'com.github.hmcts'
version = '1.4.0'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: spring-boot-template"
    property "sonar.projectKey", "uk.gov.hmcts.reform:spring-boot-template"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.69'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '30.1.1-jre') {
      entry 'guava'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

def versions = [
  junit           : '5.7.2',
  junitPlatform   : '1.7.2',
  reformLogging   : '5.1.7',
  spring : '2.5.7'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.group == 'org.apache.logging.log4j') {
      details.useVersion '2.15.0'
    }
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: "${versions.spring}"
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${versions.spring}"

  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "2.13.1"

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${versions.spring}", {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}


